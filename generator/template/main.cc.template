/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by tinyRPC framework tinyRPC_generator.py
 * Do not edit !!!
****************************************************/
#include <google/protobuf/service.h>
#include <memory>
#include "tinyRPC/common/log.h"
#include "tinyRPC/common/config.h"
#include "tinyRPC/net/tcp/net_addr.h"
#include "tinyRPC/net/tcp/tcp_server.h"
#include "tinyRPC/net/rpc/rpc_dispatcher.h"
${INCLUDE_SERVER_HEADER}

int main(int argc, char* argv[]) {
  if (argc != 2) {
    printf("Start ${PROJECT_NAME} error, argc not 2 \n");
    printf("Start like this: \n");
    printf("./${PROJECT_NAME} ../conf/tinyRPC.xml \n");
    return 0;
  }

  tinyRPC::Config::setConfigPath(argv[1]);
  tinyRPC::Logger::setLogLevel(tinyRPC::Config::getInstance()->m_log_level);
  tinyRPC::Logger::getInstance()->InitGlobalLogger(1);
  tinyRPC::RpcDispatcher::GetRpcDispatcher()->registerService(std::make_shared<${CLASS_NAME}>());
  tinyRPC::IPV4NetAddr::s_ptr addr = std::make_shared<tinyRPC::IPV4NetAddr>("127.0.0.1", tinyRPC::Config::getInstance()->m_port);
  tinyRPC::TcpServer tcp_server(addr);
  tcp_server.start();
  return 0;
}